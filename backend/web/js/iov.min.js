+ function ($) {
    var cfg = {
        server_: "http://localhost/BLOG/backend/web/",
        //server_: "http://192.168.184.128/MCA/backend/web/",
        user: 'MCA_USERINFO',
        auth: 'auth',
    }
    $.cfg = cfg;
    $.ajaxSetup({
        data: {

        },
        success: function (data) {},
        error: function (xhr, status, e) {
            var pathName = window.top.location.pathname.substring(0, window.top.location.pathname.substr(1).indexOf('/') + 1);
            var localPath = window.top.location.origin;
            var rootPath = localPath + localPath;

            if (xhr.status == 401) {
                if (window.top == window.self) { //不存在父页面
                    window.location.replace("/login.html");
                } else {
                    window.top.location.replace($.cfg.server_ + "/login.html");
                }
            } else if (xhr.status == 405) {
                alert(xhr.responseText)
            }
        }
    })
}(jQuery);
/** b-iov-utils start**/
+

function ($) {
    $.getUrlParams = function (name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
        var r = window.location.search.substr(1).match(reg);
        if (r != null) return unescape(r[2]);
        return null;
    }
    $.windowHeight = function () {
        var de = document.documentElement;
        return self.innerHeight || (de && de.clientHeight) || document.body.clientHeight;
    }
    $.pad = function () {
        var tbl = [];
        return function (num, n, p) {
            if (!p) {
                p = '0'
            }
            var len = n - num.toString().length;
            if (len <= 0) return num;
            if (!tbl[len]) tbl[len] = (new Array(len + 1)).join(p);
            return tbl[len] + num;
        }
    }();

    $.toHtml = function (str) {
        var RexStr = /\<|\>/g
        str = str.replace(RexStr, function (MatchStr) {
            switch (MatchStr) {
                case "<":
                    return "&lt;";
                case ">":
                    return "&gt;";
                default:
                    return MatchStr;
            }
        })
        return str;
    }

    $.formatNumber = function (number) {
        number = !isNaN(number) ? number : 0
        return number ? Number(number) : 0
    }

    $.openWindow = function (options) {
        if (options.url.indexOf('http://') == -1) {
            var path = window.location.pathname;
            path = path.substring(0, path.lastIndexOf('/') + 1)
            options.url = path + options.url
        }

        if (window.parent.openTabs) {
            window.parent.openTabs(options);
        } else {
            window.open(options.url)
        }
    }

    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
    Math.uuid = function (len, radix) {
        var chars = CHARS,
            uuid = [],
            i;
        radix = radix || chars.length;

        if (len) {
            for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random() * radix];
        } else {
            var r;

            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
            uuid[14] = '4';

            for (i = 0; i < 36; i++) {
                if (!uuid[i]) {
                    r = 0 | Math.random() * 16;
                    uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
                }
            }
        }
        return uuid.join('');
    };

    Date.prototype.format = function (format) {
        if (format == undefined) return '';
        var date = {
            "m+": this.getMonth() + 1,
            "d+": this.getDate(),
            "h+": this.getHours(),
            "i+": this.getMinutes(),
            "s+": this.getSeconds(),
            "q+": Math.floor((this.getMonth() + 3) / 3),
            "S+": this.getMilliseconds()
        };
        if (/(y+)/i.test(format)) {
            format = format.replace(RegExp.$1, (this.getFullYear() + '').substr(4 - RegExp.$1.length));
        }
        for (var k in date) {
            if (new RegExp("(" + k + ")").test(format)) {
                format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? date[k] : ("00" + date[k]).substr(("" + date[k]).length));
            }
        }
        return format;
    }

    Date.prototype.addMonth = function (i) {
        var d = new Date(this.getTime())
        d.setMonth(d.getMonth() + Number(i));
        var month = d.getMonth() + 1;
        var day = d.getDate();

        if (month < 10) {
            month = "0" + month;
        }
        if (day < 10) {
            day = "0" + day;
        }
        return d.getFullYear() + '-' + month + '-' + day;

    }

    Date.prototype.addDays = function (days) {
        var ds = this.getTime() + (24 * 60 * 60 * 1000 * Number(days));
        return new Date(ds)
    }

    $.extend(String.prototype, {
        isPositiveInteger: function () {
            return new RegExp(/^[1-9]\d*$/).test(this)
        },
        isInteger: function () {
            return new RegExp(/^\d+$/).test(this)
        },
        isNumber: function () {
            return new RegExp(/^([-]{0,1}(\d+)[\.]+(\d+))|([-]{0,1}(\d+))$/).test(this)
        },
        includeChinese: function () {
            return new RegExp(/[\u4E00-\u9FA5]/).test(this)
        },
        trim: function () {
            return this.replace(/(^\s*)|(\s*$)|\r|\n/g, "")
        },
        startsWith: function (a) {
            return 0 === this.indexOf(a)
        },
        endsWith: function (a) {
            var b = this.length - a.length;
            return b >= 0 && this.lastIndexOf(a) === b
        },
        replaceAll: function (a, b) {
            return this.replace(new RegExp(a, "gm"), b)
        }
    });

    $.fn.serializeObject = function () {
        var o = {};
        var a = this.serializeArray();
        $.each(a, function () {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    };

    $.openPostWindow = function (url, args) {
        var _form = $("<form></form>", {
            'method': 'post',
            'action': url,
            'target': '_blank',
            'style': 'display:none'
        }).appendTo($("body"));

        for (var i in args) {
            _form.append($("<input>", {
                'type': 'hidden',
                'name': i,
                'value': args[i]
            }));
        }
        _form.trigger("submit");
        _form.remove();
    }
}(jQuery);

/** b-iov-utils end**/
/** b-iov-cache start**/
+
function ($) {
    var cacheFactory = function (value, expiry) {
        if (!String(expiry).isInteger()) {
            expiry = 0;
        }
        expiry = expiry == 0 ? 0 : new Date().getTime() + Number(expiry);
        return {
            val: value,
            expiry: expiry,
            _d: 0
        };
    }

    var Cache = function (storage) {
        this.storage = storage;
        this.storageEvent = {};
    }

    Cache.prototype.addChangeListener = function (key, fun) {
        var $this = this;

        var cacheKey = "Change__" + key;
        $this.storageEvent[cacheKey] = fun;

        var storageHandle = function (e) {
            $this.trigger(e.key, e)
        };
        if (window.addEventListener) {
            window.addEventListener("storage", storageHandle, false);
        } else {
            window.attachEvent("onstorage", storageHandle);
        };

    }

    Cache.prototype.trigger = function (key, e) {
        var $this = this;
        var cacheKey = "Change__" + key;

        if (typeof this.storageEvent[cacheKey] == "function") {
            this.storageEvent[cacheKey]({
                key: key,
                value: $this.get(key)
            });
        }
    }

    Cache.prototype.getObject = function (key) {
        if (this.storage.getItem(key)) {
            var v = this.storage.getItem(key);
            if (v.startsWith("{") && v.endsWith("}")) {
                var c = JSON.parse(v);
                if (c._d == 0) {
                    if (c.expiry != 0 && c.expiry < new Date().getTime()) {
                        this.remove(key);
                        return undefined;
                    }
                    return c;
                }
            }
        }
    }

    Cache.prototype.setObject = function (key, value) {
        this.storage.setItem(key, JSON.stringify(value));
        this.trigger(key)
    }

    Cache.prototype.set = function (key, value, expiry) {
        this.setObject(key, cacheFactory(value, expiry))
    }

    Cache.prototype.get = function (key) {
        var v = this.getObject(key);
        if (v != undefined) {
            return v.val;
        }
    }

    Cache.prototype.remove = function (key) {
        var result = this.storage.removeItem(key);
        this.trigger(key)
        return result;
    }

    Cache.prototype.incr = function (key, value, expiry) {
        if (!String(value).isInteger()) {
            value = 1;
        }
        if (!String(expiry).isInteger()) {
            expiry = 0;
        }
        var v = this.getObject(key);
        if (v != undefined) {
            v.val += Number(value);
            v.expiry += Number(expiry);
        } else {
            v = cacheFactory(value, expiry);
        }
        this.setObject(key, v);
        return v.val;
    }

    Cache.prototype.decr = function (key, value, expiry) {
        if (!String(value).isInteger()) {
            value = 1;
        }
        if (!String(expiry).isInteger()) {
            expiry = 0;
        }
        var v = this.getObject(key);
        if (v != undefined) {
            v.val -= Number(value);
            v.expiry += Number(expiry);
        } else {
            v = cacheFactory(-value, expiry);
        }
        this.setObject(key, v);
        return v.val;
    }

    Cache.prototype.contains = function () {
        return this.storage.getItem(key) != null
    }

    Cache.prototype.clearAll = function () {
        this.storage.clear();
    }

    Cache.prototype.destroy = function () {
        for (var i = 0; i < this.storage.length; i++) {
            this.getObject(this.storage.key(i));
        }
    }
    Cache.prototype.getKey = function (prefix) {
        var itemList = {}
        for (var i = 0; i < this.storage.length; i++) {
            var key = this.storage.key(i)
            if (prefix) {
                if (key.match(/^TABLE_CFG_\d+/)) itemList[key] = key
            } else {
                itemList[key] = key
            }
        }
        return itemList
    }

    $.localCache = new Cache(window.localStorage);
    $.sessionCache = new Cache(window.sessionStorage);
}(jQuery);
/** b-iov-cache end**/
+
/** b-iov-userInfo start**/
function ($) {

    var userInfo = function () {
        var user = {}
        this.load();
    }

    userInfo.prototype.load = function (info) {

        var uInfo = $.localCache.get($.cfg.user) || {};
        this.user = $.extend(uInfo, info);
    }

    userInfo.prototype.isLogin = function () {
        return this.user.userId > 0
    }

    userInfo.prototype.getUserName = function () {
        return this.user.username
    }

    $.u = new userInfo();

}(jQuery);
/** b-iov-userInfo end**/